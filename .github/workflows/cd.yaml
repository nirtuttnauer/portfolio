name: CD

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20" # Updated to a newer LTS version for better support

      - name: Install dependencies
        run: npm i

  docker-build:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-buildx-${{ github.ref_name }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-buildx-${{ github.ref_name }}-

      - name: Build Docker Image
        run: |
          docker buildx build \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache-new,mode=max \
            --tag my-app:${{ github.sha }} \
            --tag my-app:latest \
            .

      - name: Save Cache
        if: always()
        run: mv /tmp/.buildx-cache-new/* /tmp/.buildx-cache/ || true

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: docker-build

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Login to DockerHub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

      # - name: Push Docker Image
      #   run: |
      #     docker tag my-app:${{ github.sha }} my-docker-registry/my-app:${{ github.sha }}
      #     docker tag my-app:latest my-docker-registry/my-app:latest
      #     docker push my-docker-registry/my-app:${{ github.sha }}
      #     docker push my-docker-registry/my-app:latest

      # - name: Deploy to Server
      #   run: |
      #     ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
      #       docker pull my-docker-registry/my-app:latest
      #       docker stop my-app || true
      #       docker rm my-app || true
      #       docker run -d --name my-app -p 80:80 my-docker-registry/my-app:latest
      #     EOF